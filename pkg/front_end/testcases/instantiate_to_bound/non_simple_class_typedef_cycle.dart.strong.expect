// Errors:
//
// pkg/front_end/testcases/instantiate_to_bound/non_simple_class_typedef_cycle.dart:10:14: Error: Generic type 'Fisk' can't be used without type arguments in the bounds of its own type variables. It is referenced indirectly through 'Hest'.
// Try providing type arguments to 'Hest' here or to some other raw types in the bounds along the reference chain.
// typedef void Fisk<TypeY extends Hest>();
//              ^^^^
//
// pkg/front_end/testcases/instantiate_to_bound/non_simple_class_typedef_cycle.dart:10:14: Error: The typedef 'Fisk' has a reference to itself.
// typedef void Fisk<TypeY extends Hest>();
//              ^

library;
import self as self;
import "dart:core" as core;

typedef Fisk<TypeY extends self::Hest<() → void> = dynamic> = () → void;
class Hest<TypeX extends () → void = () → void> extends core::Object {
  synthetic constructor •() → void
    : super core::Object::•()
    ;
}
static method main() → dynamic {}
