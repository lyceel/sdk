library;
import self as self;
import "dart:core" as core;

abstract class I extends core::Object {
  synthetic constructor •() → void
    : super core::Object::•()
    ;
  abstract method foo() → dynamic;
}
class A extends core::Object {
  synthetic constructor •() → void
    : super core::Object::•()
    ;
  method foo() → dynamic {}
}
class B extends core::Object implements self::I {
  synthetic constructor •() → void
    : super core::Object::•()
    ;
  method noSuchMethod(dynamic _) → dynamic
    return null;
  no-such-method-forwarder method foo() → dynamic
    return this.{self::B::noSuchMethod}(new core::_InvocationMirror::_withoutType("foo", const <core::Type>[], const <dynamic>[], core::Map::unmodifiable<core::Symbol, dynamic>(const <core::Symbol, dynamic>{}), false)) as{TypeError} dynamic;
}
abstract class _C&A&B extends self::A implements self::B {
  synthetic constructor •() → void
    : super self::A::•()
    ;
  method noSuchMethod(dynamic _) → dynamic
    return null;
}
class C extends self::_C&A&B {
  synthetic constructor •() → void
    : super self::A::•()
    ;
}
static method main() → dynamic {}
